"use strict";(self["webpackChunkvue_vital_sign_app"]=self["webpackChunkvue_vital_sign_app"]||[]).push([[518],{9518:function(e,i,a){a.d(i,{MediaPipeFaceDetector:function(){return d}});var s=a(4409),t=a(5254),o=Object.defineProperty,n=(e,i,a)=>i in e?o(e,i,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[i]=a,r=(e,i,a)=>(n(e,"symbol"!=typeof i?i+"":i,a),a);function c(e){const i=new s.FaceMesh({locateFile:e=>`https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${e}`});return i.onResults((i=>{const a=i.image;if(void 0===i.multiFaceLandmarks)return e({faceBox:void 0,landmarks:[],videoFrame:a});const s=i.multiFaceLandmarks[0];if(!s||0===s.length)return e({faceBox:void 0,landmarks:[],videoFrame:a});let o=(0,t.a)(s);e({faceBox:o,landmarks:s,videoFrame:a})})),i}class d{constructor(){r(this,"faceMesh"),r(this,"promise"),this.faceMesh=c((e=>{void 0!==this.promise&&(this.promise(e),this.promise=void 0)}))}async loadModels(){await new Promise((e=>setTimeout(e,1e3)));const e=await(0,t.l)();await this.faceMesh.send({image:e}),await new Promise((e=>setTimeout(e,2e3))),console.log("MediaPipe models loaded")}detect(e){return new Promise(((i,a)=>{this.promise=i,this.faceMesh.send(e).catch(a)}))}}}}]);
//# sourceMappingURL=518.60ba5d2e.js.map
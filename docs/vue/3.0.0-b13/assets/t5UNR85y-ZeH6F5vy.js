import{t as c,r as m,n as l,a as h}from"./index-B5cHlXDj.js";var u=Object.defineProperty,f=(a,e,i)=>e in a?u(a,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):a[e]=i,n=(a,e,i)=>f(a,typeof e!="symbol"?e+"":e,i);async function p(a,e){const{FaceMesh:i}=await l(),t=new i({locateFile:s=>{switch(e){case c.CDN:return`https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${s}`;case c.SelfHosted:const{protocol:r,host:o}=window.location;return`${r}//${o}/models/mediapipe/${s}`}}});return t.onResults(s=>{const r=s.image;if(s.multiFaceLandmarks===void 0)return a({faceBox:void 0,landmarks:[],videoFrame:r});const o=s.multiFaceLandmarks[0];if(!o||o.length===0)return a({faceBox:void 0,landmarks:[],videoFrame:r});let d=h(o);a({faceBox:d,landmarks:o,videoFrame:r})}),t}class v{constructor(){n(this,"faceMesh"),n(this,"promise"),n(this,"modelLocation",c.CDN)}async loadModels(e){this.faceMesh=await p(t=>{this.promise!==void 0&&(this.promise(t),this.promise=void 0)},e||this.modelLocation),await new Promise(t=>setTimeout(t,1e3));const i=await m();await this.faceMesh.send({image:i}),await new Promise(t=>setTimeout(t,2e3)),console.log("MediaPipe models loaded")}detect(e){return new Promise((i,t)=>{if(this.faceMesh===void 0){t(new Error("MediaPipe face mesh detector not ready"));return}this.promise=i,this.faceMesh.send(e).catch(t)})}}export{v as MediaPipeFaceDetector};
